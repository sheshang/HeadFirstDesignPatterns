* To reduce the overuse of inheritance, we decorate the classes at runtime through form of object composition.

* It helps to add new functionality dynamically.

* It uses open - closed principle. Be aware that, overuse of this principle is wasteful, unnecessary and complex to read.

* Use wrapper class to decorate the original object on the fly, and use delegation to calculate the final result.

* Wrappers (decorators ) are of the same supertype as of original object.

* Any number of decorators are possible.

* Each decorator adds new behavior to the original behavior.

* There will be one abstract class ( or interface) for component, one class for decorator (that inherits or implements component). All concrete components inherits component class and concrete decorators inherit decorator class.

* Cons:
	* Lots of small classes
	* Chain of decorators to append (factory and builder patterns are solution)
	* Decorators are transparent and in case of type depdendent code adding decorators can do harm.